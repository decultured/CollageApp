<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:clg="Collage.Clip.*"
	    xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
		alpha.disabled="0.5"
		creationComplete="CreationCompleteHandler(event)">
    <fx:Metadata>
        <![CDATA[ 
        	[HostComponent("Collage.Clip.ClipView")]
        ]]>
    </fx:Metadata> 
	<fx:Script><![CDATA[
		import mx.events.PropertyChangeEvent;
		import mx.events.FlexEvent;

		protected function EnterEditState(event:FlexEvent):void
		{
		}
		
		protected function CreationCompleteHandler(event:FlexEvent):void
		{
			hostComponent.model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, ModelChanged, false, 0, true);
		}

		protected function ModelChanged(event:PropertyChangeEvent):void
		{
			if (event && event.property != "x" && event.property != "y" && event.property != "width" && event.property != "height")
			{
				chart.invalidateDisplayList();
			}
		}
	]]></fx:Script>
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
        <s:State name="editing" enterState="{EnterEditState(event);}"/>
    </s:states>
	<clg:ClipBackground model="{hostComponent.model}" skinClass="Collage.Clip.Skins.ClipBackgroundSkin" width="100%" height="100%">
		<s:Rect width="100%" height="100%" visible="{!hostComponent.model.query.resultRows || !hostComponent.model.query.resultRows.length }" >
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry alpha="0.5" color="#E2E2E2" ratio="0"/>
					<s:GradientEntry alpha="0.5" color="#B7B7B7" ratio="1"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:VGroup horizontalAlign="center" horizontalCenter="0" verticalCenter="0" visible="{!hostComponent.model.query.resultRows.length || !hostComponent.model.query.resultRows.length}" >
			<s:BitmapImage id="errorImg" source="@Embed('/Assets/icons/48cancel.png')" minWidth="5" minHeight="5" />
			<s:Label text="No data has been set." color="#222222" maxDisplayedLines="1" fontWeight="bold" fontSize="12" textAlign="center" />
		</s:VGroup>
		<mx:PieChart id="chart" height="100%" width="100%" innerRadius="{hostComponent.model.innerRadius}"
			minWidth="5" minHeight="5" 
	        showDataTips="true" dataProvider="{hostComponent.model.query.resultRows}" >
	        <mx:series>
	            <mx:PieSeries
					field="{hostComponent.model.data}"
					nameField="{hostComponent.model.group}"
					fontAntiAliasType="advanced"
					fontSharpness="-400"
					explodeRadius="{hostComponent.model.explodeRadius}"
					labelPosition="{hostComponent.model.labelPosition}"
					fontSize="{hostComponent.model.labelSize}"
					color="{hostComponent.model.labelColor}" >
	                <mx:radialStroke>
					    <mx:SolidColorStroke id="radial" weight="{hostComponent.model.radialWeight}" color="{hostComponent.model.radialColor}" alpha="{hostComponent.model.radialAlpha}"/>
		            </mx:radialStroke>
			        <mx:stroke>
					    <mx:SolidColorStroke id="pieborder" color="{hostComponent.model.pieBorderColor}" weight="{hostComponent.model.pieBorderWeight}" alpha="{hostComponent.model.pieBorderAlpha}"/>
				    </mx:stroke>
                	<mx:calloutStroke>
						<mx:SolidColorStroke id="callouts" weight="{hostComponent.model.calloutWeight}" color="{hostComponent.model.calloutColor}" alpha="{hostComponent.model.calloutAlpha}" caps="none"/>
					</mx:calloutStroke>
					<mx:filters>
					</mx:filters>
	            </mx:PieSeries>
	        </mx:series>
	    </mx:PieChart>
	</clg:ClipBackground>
</s:Skin>