<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:clg="Collage.Clip.*"
	    xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		alpha.disabled="0.5"
		creationComplete="CreationCompleteHandler(event)">
    <fx:Metadata>
        <![CDATA[ 
        	[HostComponent("Collage.Clip.ClipView")]
        ]]>
    </fx:Metadata> 
	<fx:Script><![CDATA[
		import mx.events.PropertyChangeEvent;
		import mx.events.FlexEvent;
		import mx.charts.chartClasses.*;
		import mx.charts.renderers.*;
		import Collage.Clips.*;
		import Collage.Utilities.Logger.*;

		[Bindable]public var hAxis:IAxis = numeric_haxis;

		protected function EnterEditState(event:FlexEvent):void
		{
		}

		protected function CreationCompleteHandler(event:FlexEvent):void
		{
			ModelChanged(null);
			hostComponent.model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, ModelChanged, false, 0, true);
		}

		protected function ModelChanged(event:PropertyChangeEvent):void
		{
			if (!event || event.property == "plotRadius")
			{
				plotSeries.setStyle("radius", hostComponent.model.plotRadius);
				bubblechart.invalidateDisplayList();
				gridLines.invalidateDisplayList();
			}
			if (!event || event.property == "plotShapeID")
			{
				Logger.Log("Plot Series Changed to: " + hostComponent.model.plotShapeID, this);
				if (hostComponent.model.plotShapeID == 0) // Circle
					plotSeries.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer));
				else if (hostComponent.model.plotShapeID == 1) // Diamond
					plotSeries.setStyle("itemRenderer", new ClassFactory(DiamondItemRenderer));
				else if (hostComponent.model.plotShapeID == 2) // Box
					plotSeries.setStyle("itemRenderer", new ClassFactory(BoxItemRenderer));
				else if (hostComponent.model.plotShapeID == 3) // Tri
					plotSeries.setStyle("itemRenderer", new ClassFactory(TriangleItemRenderer));
				else if (hostComponent.model.plotShapeID == 4) // Cross
					plotSeries.setStyle("itemRenderer", new ClassFactory(CrossItemRenderer));
			}
			if (!event || event.property == "xAxisType") {
				if (hostComponent.model.xAxisType == "numeric") {
					horizontalAxisRenderer.axis = numeric_haxis;
					bubblechart.horizontalAxis = numeric_haxis;
				} else if (hostComponent.model.xAxisType == "datetime") {
					horizontalAxisRenderer.axis = datetime_haxis;
					bubblechart.horizontalAxis = datetime_haxis;
				}
			}
			if (!event || (event.property != "x" && event.property != "y" && event.property != "width" && event.property != "height"))
			{
				bubblechart.invalidateDisplayList();
				gridLines.invalidateDisplayList();
			}
		}
	]]></fx:Script>
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
        <s:State name="editing" enterState="{EnterEditState(event);}"/>
    </s:states>
	<fx:Declarations>
		<mx:DateTimeAxis id="datetime_haxis" direction="normal" disabledDays="[]" />
		<mx:LinearAxis id="numeric_haxis" baseAtZero="false"/>
	</fx:Declarations>
	<clg:ClipBackground model="{hostComponent.model}" skinClass="Collage.Clip.Skins.ClipBackgroundSkin" width="100%" height="100%">
		<mx:BubbleChart id="bubblechart" height="100%" width="100%"
			minWidth="5" minHeight="5" 
			showDataTips="true" dataProvider="{hostComponent.model.query.resultRows}" seriesFilters="[]"
			horizontalAxis="{numeric_haxis}">
			<mx:verticalAxis>
				<mx:LinearAxis id="vaxis" baseAtZero="false"/>
			</mx:verticalAxis>			
		    <mx:verticalAxisRenderers>
		        <mx:AxisRenderer
		            axis="{vaxis}"
					minorTickPlacement="none"
		            tickPlacement="none"
		            showLine="{hostComponent.model.vAxisVisible}"
					fontSize="{hostComponent.model.vAxisLabelSize}"
					color="{hostComponent.model.vAxisLabelColor}"
					alpha="{hostComponent.model.vAxisLabelAlpha}"
		            labelGap="{hostComponent.model.vAxisLabelGap}" >
		            <mx:axisStroke>
					    <s:SolidColorStroke id="vAxisStroke" color="{hostComponent.model.vAxisColor}" weight="{hostComponent.model.vAxisWeight}" alpha="{hostComponent.model.vAxisAlpha}" caps="none"/>
					</mx:axisStroke>
				</mx:AxisRenderer>
		    </mx:verticalAxisRenderers>
		    <mx:horizontalAxisRenderers>
		        <mx:AxisRenderer
					id="horizontalAxisRenderer"
					axis="{numeric_haxis}"
		            showLine="{hostComponent.model.hAxisVisible}"
					minorTickPlacement="none"
		            tickPlacement="none"
					fontSize="{hostComponent.model.hAxisLabelSize}"
					color="{hostComponent.model.hAxisLabelColor}"
					alpha="{hostComponent.model.hAxisLabelAlpha}"
		            labelGap="{hostComponent.model.hAxisLabelGap}">
					<mx:axisStroke>
						<s:SolidColorStroke id="hAxisStroke" color="{hostComponent.model.hAxisColor}" weight="{hostComponent.model.hAxisWeight}" alpha="{hostComponent.model.hAxisAlpha}" caps="none"/>
					</mx:axisStroke>
				</mx:AxisRenderer>
		    </mx:horizontalAxisRenderers>
		    <mx:backgroundElements>
		        <mx:GridLines
					id="gridLines"
					gridDirection="{hostComponent.model.gridDirection}"
					verticalShowOrigin="{hostComponent.model.gridHOriginVisible}"
		            horizontalShowOrigin="{hostComponent.model.gridHOriginVisible}"
					visible="{hostComponent.model.gridVisible}" >
		            <mx:horizontalStroke>
					    <s:SolidColorStroke color="{hostComponent.model.gridColor}" weight="{hostComponent.model.gridWeight}" alpha="{hostComponent.model.gridAlpha}" caps="none"/>
					</mx:horizontalStroke>
		            <mx:verticalStroke>
					    <s:SolidColorStroke color="{hostComponent.model.gridColor}" weight="{hostComponent.model.gridWeight}" alpha="{hostComponent.model.gridAlpha}" caps="none"/>
					</mx:verticalStroke>
					<mx:verticalOriginStroke>
					    <s:SolidColorStroke id="gridVOriginStroke" color="{hostComponent.model.gridVOriginColor}" weight="{hostComponent.model.gridVOriginWeight}" alpha="{hostComponent.model.gridVOriginAlpha}" caps="none"/>
					</mx:verticalOriginStroke>
					<mx:horizontalOriginStroke>
					    <s:SolidColorStroke id="gridHOriginStroke" color="{hostComponent.model.gridHOriginColor}" weight="{hostComponent.model.gridHOriginWeight}" alpha="{hostComponent.model.gridHOriginAlpha}" caps="none"/>
					</mx:horizontalOriginStroke>
				</mx:GridLines>
		    </mx:backgroundElements>
			<mx:series>
			    <mx:BubbleSeries
					id="plotSeries"
					yField="{hostComponent.model.yAxis}"
					xField="{hostComponent.model.xAxis}"
					radiusField="{hostComponent.model.bubbleRadius}"
					displayName="Values:" 
					filters="[]" >
					<mx:fill>
						<mx:SolidColor id="plotFill" color="{hostComponent.model.plotColor}" alpha="{hostComponent.model.plotAlpha}"/>
					</mx:fill>
				</mx:BubbleSeries>
			</mx:series>
		</mx:BubbleChart>
	</clg:ClipBackground>
</s:Skin>