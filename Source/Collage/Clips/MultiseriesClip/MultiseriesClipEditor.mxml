<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		xmlns:clg="Collage.Clip.*"
		xmlns:mlt="Collage.Clips.MultiseriesClip.*"
 		xmlns:ep="com.endlesspaths.components.*"
		creationComplete="CreationCompleteHandler(event)">
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
        <s:State name="editing" />
    </s:states>
	<fx:Script><![CDATA[
		import mx.events.PropertyChangeEvent;
		import mx.events.FlexEvent;
		import mx.charts.chartClasses.*;
		import Collage.Clips.*;
		import Collage.Clip.*;

		protected function CreationCompleteHandler(event:FlexEvent):void
		{
			ModelChanged(null);
			hostComponent.model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, ModelChanged, false, 0, true);
		}

		protected function ModelChanged(event:PropertyChangeEvent):void
		{
			if (!event || event.property == "seriesSelectedItem") {
				partEditorGroup.removeAllElements();
				if (hostComponent.model.seriesSelectedItem) {
					if (hostComponent.model.seriesSelectedItem is DataClip) {
						var clip:DataClip = hostComponent.model.seriesSelectedItem as DataClip;
						partEditorGroup.addElement(clip.CreateEditor());
					}
				}
			}
			if (event && event.property != "x" && event.property != "y" && event.property != "width" && event.property != "height")
			{
			}
		}

	]]></fx:Script>
    <fx:Metadata>
        <![CDATA[ 
        	[HostComponent("Collage.Clip.ClipEditor")]
        ]]>
    </fx:Metadata> 
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle"/>
	</s:layout>
	<clg:ClipBackgroundEditor viewObject="{hostComponent.model}" />
	<mlt:PartEditor viewObject="{hostComponent.model}" />
	<mlt:AxisEditor viewObject="{hostComponent.model}" />
	<s:Group id="partEditorGroup">
		
	</s:Group>
	<s:Group>
		<ep:ImageButton text="H-Axis" image="@Embed('/Assets/toolbar/lineChartHAxis.png')" click="hAxisEditorPopup.displayPopUp = !hAxisEditorPopup.displayPopUp;" />
		<ep:StatefulPopUpAnchor id="hAxisEditorPopup" displayPopUp="false" popUpPosition="below" enabled="true" top="48">
			<ep:CalloutPanel id="hAxisEditorPanel" arrowPosition="top" title="Axis Color">
				<ep:ColorSwatchAlphaSelector selectedColor="@{hostComponent.model.hAxisColor}" selectedAlpha="@{hostComponent.model.hAxisAlpha}" />
				<s:HGroup width="100%">
					<s:Label text="Axis Weight:" color="0xffffff" />
					<s:HSlider minimum="0" maximum="16" value="@{hostComponent.model.hAxisWeight}" liveDragging="true" width="100%"/>
				</s:HGroup>
				<s:Label text="Horizontal Axis Labels" color="0xffffff" textAlign="center" width="100%"/>
				<ep:ColorSwatchAlphaSelector selectedColor="@{hostComponent.model.hAxisLabelColor}" selectedAlpha="@{hostComponent.model.hAxisLabelAlpha}" />
				<s:HGroup width="100%">
					<s:Label text="Label Size:" color="0xffffff" />
					<s:HSlider minimum="6" maximum="72" value="@{hostComponent.model.hAxisLabelSize}" liveDragging="true" width="100%"/>
				</s:HGroup>
				<s:HGroup width="100%">
					<s:Label text="Label Gap:" color="0xffffff" />
					<s:HSlider minimum="0" maximum="72" value="@{hostComponent.model.hAxisLabelGap}" liveDragging="true" width="100%"/>
				</s:HGroup>
			</ep:CalloutPanel>
		</ep:StatefulPopUpAnchor>
	</s:Group>
	<s:Group>
		<ep:ImageButton text="Grid" image="@Embed('/Assets/toolbar/lineChartGrid.png')" click="gridEditorPopup.displayPopUp = !gridEditorPopup.displayPopUp;" />
		<ep:StatefulPopUpAnchor id="gridEditorPopup" displayPopUp="false" popUpPosition="below" enabled="true" top="48">
			<ep:CalloutPanel id="gridEditorPanel" arrowPosition="top" title="Text Color">
				<ep:ColorSwatchAlphaSelector selectedColor="@{hostComponent.model.gridColor}" selectedAlpha="@{hostComponent.model.gridAlpha}" />
				<s:ButtonBar id="gridDirectionBar" requireSelection="true" selectedItem="@{hostComponent.model.gridDirection}" width="250"> 
					<mx:ArrayCollection> 
						<fx:String>both</fx:String> 
						<fx:String>horizontal</fx:String> 
						<fx:String>vertical</fx:String> 
						<fx:String>none</fx:String> 
					</mx:ArrayCollection> 
				</s:ButtonBar>
				<s:HGroup width="100%">
					<s:Label text="Grid Weight:" color="0xffffff" />
					<s:HSlider id="gridWeight" minimum="0" maximum="15" snapInterval="1" value="@{hostComponent.model.gridWeight}" liveDragging="true" width="100%" />
				</s:HGroup>
			</ep:CalloutPanel>
		</ep:StatefulPopUpAnchor>
	</s:Group>
</s:Skin>