<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:clg="Collage.Clip.*"
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		alpha.disabled="0.5"
		creationComplete="CreationCompleteHandler(event)">
	<fx:Metadata>
		<![CDATA[ 
			[HostComponent("Collage.Clip.ClipView")]
		]]>
	</fx:Metadata> 
	<fx:Script><![CDATA[
		import mx.events.PropertyChangeEvent;
		import mx.events.FlexEvent;
		import mx.charts.chartClasses.*;
		import mx.events.CollectionEvent;
		import mx.collections.ArrayList;
		import Collage.Clips.*;
		import Collage.Utilities.Logger.*;
		import Collage.Clips.MultiseriesClip.Components.LineSeries.*;
		import Collage.Clips.MultiseriesClip.Components.ColumnSeries.*;
		import Collage.Clips.MultiseriesClip.Components.PlotSeries.*;
		import Collage.Clips.MultiseriesClip.Components.VAxis.*;
		

		[Bindable]public var hAxis:IAxis = numeric_haxis;
		private var defaultVAxisRenderer:AxisRenderer = new AxisRenderer(); 
		private var defaultAxis:LinearAxis = new LinearAxis();

		protected function EnterEditState(event:FlexEvent):void
		{
		
		}

		protected function CreationCompleteHandler(event:FlexEvent):void
		{
			ModelChanged(null);
			hostComponent.model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, ModelChanged, false, 0, true);
			
			(hostComponent.model.series as ArrayList).addEventListener(CollectionEvent.COLLECTION_CHANGE, SeriesChanged, false, 0, true);
			(hostComponent.model.vAxis as ArrayList).addEventListener(CollectionEvent.COLLECTION_CHANGE, AxisChanged, false, 0, true);
			
			defaultVAxisRenderer.visible = false; 
			defaultVAxisRenderer.height = 0; 
			defaultVAxisRenderer.width = 0;
			defaultVAxisRenderer.axis = defaultAxis;
			defaultVAxisRenderer.setStyle("showLabels", false);
			
			linechart.verticalAxisRenderer = defaultVAxisRenderer;
			linechart.verticalAxis = defaultAxis;
			
			AxisChanged(null);
		}

		protected function AxisChanged(event:CollectionEvent):void
		{
			linechart.verticalAxisRenderers = new Array();
//			linechart.verticalAxisRenderers.push(defaultVAxisRenderer);

			if (hostComponent.model.vAxis.length)
				linechart.verticalAxis = (hostComponent.model.vAxis.getItemAt(0) as VAxisPart).axis;

			for (var idx:uint = 0; idx < hostComponent.model.vAxis.length; idx++) {
				if (!hostComponent.model.vAxis.getItemAt(idx) is VAxisPart)
					continue;
					
				var axisPart:VAxisPart = hostComponent.model.vAxis.getItemAt(idx) as VAxisPart;
				linechart.verticalAxisRenderers.push(axisPart.axisRenderer);
			}			
			ModelChanged(null);
		}

		protected function SeriesChanged(event:CollectionEvent):void
		{
			linechart.series = new Array();
			
			for (var idx:uint = 0; idx < hostComponent.model.series.length; idx++) {
				if (hostComponent.model.series.getItemAt(idx) is LineSeriesPart) {
					var linePart:LineSeriesPart = hostComponent.model.series.getItemAt(idx) as LineSeriesPart;
					//linePart.series
					linechart.series.push(linePart.series);
				}
				else if (hostComponent.model.series.getItemAt(idx) is ColumnSeriesPart) {
					var columnPart:ColumnSeriesPart = hostComponent.model.series.getItemAt(idx) as ColumnSeriesPart;
					//linePart.series
					linechart.series.push(columnPart.series);
				}
			}
			ModelChanged(null);
		}

		protected function ModelChanged(event:PropertyChangeEvent):void
		{
			/*if (!event || event.property == "xAxisType") {
				if (hostComponent.model.xAxisType == "numeric") {
					horizontalAxisRenderer.axis = numeric_haxis;
					linechart.horizontalAxis = numeric_haxis;
				} else if (hostComponent.model.xAxisType == "datetime") {
					horizontalAxisRenderer.axis = datetime_haxis;
					linechart.horizontalAxis = datetime_haxis;
				}
			}
			
			if (event && event.property == "series")
			{
				Logger.Log("stuffs 1!");
				linechart.series = new Array();
				for (var idx:uint = 0; idx = hostComponent.model.series.length; idx++) {
					if (hostComponent.model.series.getItemAt(idx) is LineSeriesPart) {
						var linePart:LineSeriesPart = hostComponent.model.series.getItemAt(idx) as LineSeriesPart;
						linePart.series
						linechart.series.push(linePart.series);
						Logger.Log("stuffs!");
					}
				}
			}*/
			if (!event || (event.property != "x" && event.property != "y" && event.property != "width" && event.property != "height"))
			{
				linechart.invalidateDisplayList();
				gridLines.invalidateDisplayList();
			}
		}
	]]></fx:Script>
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
		<s:State name="editing" enterState="{EnterEditState(event);}"/>
	</s:states>
	<fx:Declarations>
		<mx:DateTimeAxis id="datetime_haxis" direction="normal" disabledDays="[]" />
		<mx:LinearAxis id="numeric_haxis" baseAtZero="false" />
	</fx:Declarations>
	<clg:ClipBackground model="{hostComponent.model}" editing="{currentState=='editing'}" skinClass="Collage.Clip.Skins.ClipBackgroundSkin" width="100%" height="100%">
		<mx:LineChart id="linechart" height="100%" width="100%"
			minWidth="5" minHeight="5" 
			showDataTips="true" seriesFilters="[]" 
			horizontalAxis="{datetime_haxis}" >
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer
					id="horizontalAxisRenderer"
					axis="{datetime_haxis}"
					showLine="{hostComponent.model.hAxisVisible}"
					showLabels="{hostComponent.model.hAxisLabelVisible}"
					minorTickPlacement="none"
					tickPlacement="none"
					fontSize="{hostComponent.model.hAxisLabelSize}"
					alpha="{hostComponent.model.hAxisLabelAlpha}"
					color="{hostComponent.model.hAxisLabelColor}"
					labelGap="{hostComponent.model.hAxisLabelGap}">
					<mx:axisStroke>
						<s:SolidColorStroke id="hAxisStroke" color="{hostComponent.model.hAxisColor}" weight="{hostComponent.model.hAxisWeight}" alpha="{hostComponent.model.hAxisAlpha}" caps="none"/>
					</mx:axisStroke>
				</mx:AxisRenderer>
			</mx:horizontalAxisRenderers>
			<mx:backgroundElements>
				<mx:GridLines
					id="gridLines"
					verticalShowOrigin="{hostComponent.model.gridHOriginVisible}"
					gridDirection="{hostComponent.model.gridDirection}"
					horizontalShowOrigin="{hostComponent.model.gridHOriginVisible}"
					visible="{hostComponent.model.gridVisible}" >
					<mx:horizontalStroke>
						<s:SolidColorStroke color="{hostComponent.model.gridColor}" weight="{hostComponent.model.gridWeight}" alpha="{hostComponent.model.gridAlpha}" caps="none"/>
					</mx:horizontalStroke>
					<mx:verticalStroke>
						<s:SolidColorStroke color="{hostComponent.model.gridColor}" weight="{hostComponent.model.gridWeight}" alpha="{hostComponent.model.gridAlpha}" caps="none"/>
					</mx:verticalStroke>
					<mx:verticalOriginStroke>
						<s:SolidColorStroke id="gridVOriginStroke" color="{hostComponent.model.gridVOriginColor}" weight="{hostComponent.model.gridVOriginWeight}" alpha="{hostComponent.model.gridVOriginAlpha}" caps="none"/>
					</mx:verticalOriginStroke>
					<mx:horizontalOriginStroke>
						<s:SolidColorStroke id="gridHOriginStroke" color="{hostComponent.model.gridHOriginColor}" weight="{hostComponent.model.gridHOriginWeight}" alpha="{hostComponent.model.gridHOriginAlpha}" caps="none"/>
					</mx:horizontalOriginStroke>
				</mx:GridLines>
			</mx:backgroundElements>
		</mx:LineChart>
	</clg:ClipBackground>
</s:Skin>