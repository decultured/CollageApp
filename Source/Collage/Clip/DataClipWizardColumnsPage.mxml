<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	    xmlns:mx="library://ns.adobe.com/flex/mx"
		clipAndEnableScrolling="false" >
		<fx:Metadata>
			[Event(name="itemDoubleClicked", type="flash.events.Event")]
		</fx:Metadata>
	<fx:Script><![CDATA[
		import Collage.Utilities.Logger.*;
		import Collage.Application.*;
		import Collage.DataEngine.*;
		import spark.events.IndexChangeEvent;
		import mx.collections.ArrayList;
		
		[Bindable]public var fieldDef:QueryFieldDefinition;
		[Bindable]public var query:DataQuery;
		
		public var dataQueryField:DataQueryField
		
		[Bindable]public var queryFields:ArrayList;
		[Bindable]public var complete:Boolean = false;

		private function handleCreationComplete():void {
		}
		
		public function Save():void
		{
			if (!columnsList.selectedItem || !dataQueryField) {
				complete = false;
				return;
			}
			
			if (modifierList.selectedItem)
				dataQueryField.modifier = modifierList.selectedItem.data;
			
			dataQueryField.isGrouped = groupCheckbox.selected;
			dataQueryField.columnID = columnsList.selectedItem["columnID"]
			
			Logger.Log("Column Set: " + dataQueryField.columnID + " internalName: " + dataQueryField.internalName + " Modifier: " + dataQueryField.modifier + " Grouped: " + dataQueryField.isGrouped, this);	
		}
		
		public function Reset():void
		{
			complete = false;

			if (!query || !fieldDef) {
				queryFields = null;
				return;
			}
			
			dataQueryField = query.FindFieldByInternalName(fieldDef.internalName);
			if (!dataQueryField) {
				dataQueryField = new DataQueryField()
				dataQueryField.internalName = fieldDef.internalName;
				dataQueryField.columnID = null;
				dataQueryField.modifier = null;
				dataQueryField.isGrouped = fieldDef.grouped;
				query.AddField(dataQueryField);
			}

			queryFields = query.GetColumnSelectionsArrayList(fieldDef.allowedTypes, fieldDef.internalName);

			groupCheckbox.selected = dataQueryField.isGrouped;
			groupCheckbox.visible = fieldDef.groupable;
			groupCheckbox.includeInLayout = fieldDef.groupable;

			if (dataQueryField.columnID) {
				for (var i:int = 0; i < queryFields.length; i++)
				{
					if (queryFields.getItemAt(i)["columnID"] == dataQueryField.columnID) {
						columnsList.selectedIndex = i;
						complete = true;
						break;
					}
				}
			}
			
			modifierList.dataProvider = DataEngine.modifierSelections;
			modifierList.visible=fieldDef.allowModifiers;
			modifierList.includeInLayout=fieldDef.allowModifiers;

			if (dataQueryField.modifier) {
				for (i = 0; i < DataEngine.modifierSelections.length; i++)
				{
					if (DataEngine.modifierSelections.getItemAt(i)["data"] == dataQueryField.modifier) {
						modifierList.selectedIndex = i;
						break;
					}
				}
			}
		}
		
		private function SelectionChanged():void
		{
			if (columnsList.selectedIndex < 0) {
				complete = false;
				return;
			}
			
			var selectedObject:Object = queryFields.getItemAt(columnsList.selectedIndex) as Object;
			
			if (selectedObject["dataTypeAllowed"] && !selectedObject["data.used"])
				complete = true;
			else {
				complete = false;
				columnsList.selectedItem = null;
			}
		}
		
		public function ItemDoubleClicked():void {
			if (columnsList.selectedItem)
				dispatchEvent(new flash.events.Event("itemDoubleClicked"));
		}
	]]></fx:Script>
	<s:Label text="{fieldDef.title} Data Selection" left="0" top="0" fontSize="18" color="#eeeeee" />
	<s:VGroup height="100%" top="40" left="20" right="20">
	 	<s:CheckBox id="groupCheckbox" label="Group this item " color="0xeeeeee" />
		<s:DropDownList id="modifierList" includeInLayout="false" visible="false" alternatingItemColors="[#EEEEEE,#ffffff]" width="150" prompt="Select a modifier" />
		<s:List id="columnsList" requireSelection="false" alternatingItemColors="[#EEEEEE,#ffffff]" borderVisible="false" height="100%" width="100%" dataProvider="{queryFields}" change="SelectionChanged()" doubleClick="ItemDoubleClicked()" doubleClickEnabled="true">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer focusRect="false" width="100%" height="25" >
						<s:states>
							<s:State name="normal"/>
							<s:State name="hovered"/>
							<s:State name="editing"/>
							<s:State name="selected"/>
						</s:states>
						<fx:Script><![CDATA[
							import Collage.Utilities.Logger.*;
							import Collage.Application.*;
					
							override public function set data(value:Object):void {
								super.data = value;
								if (data == null) // a renderer's data is set to null when it goes out of view
									return;
								
								autoDrawBackground = (data.dataTypeAllowed&&!data.used);
								
								var columnUsed:Boolean = (data.dataTypeAllowed && data.used);
								var columnNotAllowed:Boolean = (!data.dataTypeAllowed);
								
								typeNotAllowedLabel.visible = typeNotAllowedLabel.includeInLayout = columnNotAllowed;
								typeUsedLabel.visible = typeUsedLabel.includeInLayout = columnUsed;
							}
						]]></fx:Script>
						<s:Line width="100%" bottom="0">
							<s:stroke>
								<s:SolidColorStroke caps="none" color="#b2b2b2" joints="miter" miterLimit="4" weight="1"/>
							</s:stroke>
						</s:Line>
						<s:Group left="10" right="10" height="100%">
							<s:layout>
								<s:HorizontalLayout verticalAlign="middle"/>
							</s:layout>
							<s:Label id="titleText" text="{data.columnName}" color="{(!data.dataTypeAllowed||data.used)?0xb2b2b2:0x555555}" maxDisplayedLines="1" fontWeight="bold" fontSize="12"/>
							<s:Label id="typeNotAllowedLabel" visible="false" includeInLayout="false" text="Datatype not allowed" color="#f2941b" maxDisplayedLines="1" fontSize="10" />
							<s:Label id="typeUsedLabel" visible="false" includeInLayout="false" text="Column already used for this chart" color="#f2941b" maxDisplayedLines="1" fontSize="10" />
							<s:Label id="typeText" text="{data.dataType}" color="{(!data.dataTypeAllowed||data.used)?0xb2b2b2:0x555555}" maxDisplayedLines="1" fontSize="10" width="100%" textAlign="end"/>
						</s:Group>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</s:VGroup>
</s:Group>
