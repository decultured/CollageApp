<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
	    xmlns:mx="library://ns.adobe.com/flex/mx"
		width.hidden="24" width.extended="200"
		currentState="hidden" >
    <s:states>
        <s:State name="normal" />
        <s:State name="hidden" />
        <s:State name="extended" />
        <s:State name="disabled" />
    </s:states>
    <fx:Script><![CDATA[
		import Collage.Utilities.Logger.*;

        protected function ButtonClickHandler(event:MouseEvent):void
        {
            if (showBtn.selected)
                currentState = "extended";
            else currentState = "hidden";
			Logger.Log("CurrentState: "+ currentState, this);
        }

        protected function addPageHandler(event:MouseEvent):void
        {
			if (!hostComponent.appClass || !hostComponent.appClass.pageManager) return;
			hostComponent.appClass.SaveCurrentPage();
			hostComponent.appClass.pageManager.NewPage();
			removeButton.enabled = (hostComponent.appClass.pageManager.numPages > 1);
        }

        protected function removePageHandler(event:MouseEvent):void
        {
			if (!hostComponent.appClass || !hostComponent.appClass.pageManager) return;
			hostComponent.appClass.SaveCurrentPage();
			hostComponent.appClass.pageManager.RemovePage();
			removeButton.enabled = (hostComponent.appClass.pageManager.numPages > 1);
        }

        protected function copyPageHandler(event:MouseEvent):void
        {
			if (!hostComponent.appClass || !hostComponent.appClass.pageManager) return;
			hostComponent.appClass.SaveCurrentPage();
			hostComponent.appClass.pageManager.CopyPage();
			removeButton.enabled = (hostComponent.appClass.pageManager.numPages > 1);
        }

    ]]></fx:Script>
    <fx:Metadata>
        <![CDATA[ 
        	[HostComponent("Collage.Application.CollageSideBar")]
        ]]>
    </fx:Metadata> 
	<s:transitions>
		<s:Transition fromState="hidden" toState="extended"> 
            <s:Resize target="{hostComponent}" duration="200" />
		 </s:Transition> 
		<s:Transition fromState="extended" toState="hidden"> 
            <s:Resize target="{hostComponent}" duration="200" />
		 </s:Transition> 
	</s:transitions>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<s:Rect width="24" left="0" height="100%" >
		<s:fill>
			<s:LinearGradient rotation="0">
				<s:GradientEntry alpha="1.0" color="#E2E2E2" ratio="0"/>
				<s:GradientEntry alpha="1.0" color="#C7C7C7" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:Group width="24" left="0" height="100%">
		<s:ToggleButton right="-20" rotation="-90" id="showBtn" label="Pages and Datasets" click="ButtonClickHandler(event)"/>
		<s:layout><s:VerticalLayout horizontalAlign="right" paddingTop="5"/></s:layout>
	</s:Group>
	<s:Line height="100%" left="23">
		<s:stroke>
			<s:SolidColorStroke caps="none" color="#737373" joints="miter" miterLimit="4" weight="1"/>
		</s:stroke>
	</s:Line>
	<s:Group right="0" left="24" height="100%" visible.hidden="false" visible.extended="true">
	    <s:Rect width="100%" height="100%" >
	        <s:fill>
				<s:SolidColor color="0xFFFFFF" alpha="1.0"/>
	        </s:fill>
	    </s:Rect>
		<s:List requireSelection="true" contentBackgroundColor="#E2E2E2" borderVisible="false" dragEnabled="true" dragMoveEnabled="true" dropEnabled="true" width="100%" top="0" bottom="30" selectedIndex="@{hostComponent.appClass.pageManager.currentPageIndex}" dataProvider="{hostComponent.appClass.pageManager.pages}">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer focusRect="false" width="100%" height="40" doubleClick="{currentState = 'editing'}" doubleClickEnabled="true">
						<s:states>
					        <s:State name="normal"/>
					        <s:State name="hovered"/>
					        <s:State name="editing"/>
					        <s:State name="selected" />
						</s:states>
						<fx:Script><![CDATA[
							override public function set data(value:Object):void {
								super.data = value;
								if (data == null) // a renderer's data is set to null when it goes out of view
									return;
								txtStart.text = data['displayName'];
							}
						]]></fx:Script>
						<s:Rect width="100%" height="100%" >
							<s:fill>
								<s:LinearGradient rotation="90">
									<s:GradientEntry alpha="1.0" color="#E2E2E2" color.normal="#E2E2E2" color.hovered="#C7C7C7" color.selected="#E2E2F2" ratio="0"/>
									<s:GradientEntry alpha="1.0" color="#C7C7C7" color.normal="#C7C7C7" color.hovered="#E2E2E2" color.selected="#A7A7C7" ratio="1"/>
								</s:LinearGradient>
							</s:fill>
						</s:Rect>
						<s:Line width="100%" bottom="1">
							<s:stroke>
								<s:SolidColorStroke caps="none" color="#737373" joints="miter" miterLimit="4" weight="1"/>
							</s:stroke>
						</s:Line>
						<s:Line width="100%" bottom="0">
							<s:stroke>
								<s:SolidColorStroke caps="none" color="#AAAAAA" joints="miter" miterLimit="4" weight="1"/>
							</s:stroke>
						</s:Line>
						<s:Group width="100%" height="100%" visible="true" visible.editing="false">
							<s:Label id="txtStart" color="#555555" fontWeight="bold" fontSize="14" width="100%" verticalCenter="2" left="20"/>
						</s:Group>
						<s:Group width="100%" height="100%" visible="false" visible.editing="true">
							<s:TextInput fontSize="14" id="displayLabelInput" text="@{data.displayName}" width="100%"/>
						</s:Group>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
			<s:HGroup horizontalCenter="0" verticalAlign="middle" height="30" bottom="0" >
				<s:Button width="50" id="addButton" label="+" enabled="{(!hostComponent.appClass || !hostComponent.appClass.pageManager) ? false : true}" click="addPageHandler(event)" fontWeight="bold"/>
				<s:Button width="50" id="removeButton" label="-" enabled="{false}" click="removePageHandler(event)" fontWeight="bold"/>
				<s:Button width="50" id="copyButton" label="Copy" enabled="{(!hostComponent.appClass || !hostComponent.appClass.pageManager) ? false : true}" click="copyPageHandler(event)" fontWeight="bold"/>
			</s:HGroup>
	</s:Group>
</s:Skin>
